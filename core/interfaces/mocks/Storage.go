// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	interfaces "application/core/interfaces"

	mock "github.com/stretchr/testify/mock"

	model "application/core/model"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// CreateSurveyData provides a mock function with given fields: surveyData
func (_m *Storage) CreateSurveyData(surveyData model.SurveyData) error {
	ret := _m.Called(surveyData)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.SurveyData) error); ok {
		r0 = rf(surveyData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteConfig provides a mock function with given fields: id
func (_m *Storage) DeleteConfig(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSurveyData provides a mock function with given fields: id
func (_m *Storage) DeleteSurveyData(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserMatchingResult provides a mock function with given fields: id
func (_m *Storage) DeleteUserMatchingResult(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindConfig provides a mock function with given fields: configType, appID, orgID
func (_m *Storage) FindConfig(configType string, appID string, orgID string) (*model.Config, error) {
	ret := _m.Called(configType, appID, orgID)

	var r0 *model.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*model.Config, error)); ok {
		return rf(configType, appID, orgID)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *model.Config); ok {
		r0 = rf(configType, appID, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(configType, appID, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindConfigByID provides a mock function with given fields: id
func (_m *Storage) FindConfigByID(id string) (*model.Config, error) {
	ret := _m.Called(id)

	var r0 *model.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Config, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Config); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindConfigs provides a mock function with given fields: configType
func (_m *Storage) FindConfigs(configType *string) ([]model.Config, error) {
	ret := _m.Called(configType)

	var r0 []model.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) ([]model.Config, error)); ok {
		return rf(configType)
	}
	if rf, ok := ret.Get(0).(func(*string) []model.Config); ok {
		r0 = rf(configType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(configType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllOccupationDatas provides a mock function with given fields:
func (_m *Storage) GetAllOccupationDatas() ([]model.OccupationData, error) {
	ret := _m.Called()

	var r0 []model.OccupationData
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.OccupationData, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.OccupationData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.OccupationData)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOccupationData provides a mock function with given fields: id
func (_m *Storage) GetOccupationData(id string) (*model.OccupationData, error) {
	ret := _m.Called(id)

	var r0 *model.OccupationData
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.OccupationData, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.OccupationData); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OccupationData)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSurveyData provides a mock function with given fields: id
func (_m *Storage) GetSurveyData(id string) (*model.SurveyData, error) {
	ret := _m.Called(id)

	var r0 *model.SurveyData
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.SurveyData, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.SurveyData); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SurveyData)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserMatchingResult provides a mock function with given fields: id
func (_m *Storage) GetUserMatchingResult(id string) (*model.UserMatchingResult, error) {
	ret := _m.Called(id)

	var r0 *model.UserMatchingResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.UserMatchingResult, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.UserMatchingResult); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserMatchingResult)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertConfig provides a mock function with given fields: config
func (_m *Storage) InsertConfig(config model.Config) error {
	ret := _m.Called(config)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Config) error); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PerformTransaction provides a mock function with given fields: _a0
func (_m *Storage) PerformTransaction(_a0 func(interfaces.Storage) error) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(interfaces.Storage) error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterStorageListener provides a mock function with given fields: listener
func (_m *Storage) RegisterStorageListener(listener interfaces.StorageListener) {
	_m.Called(listener)
}

// SaveUserMatchingResult provides a mock function with given fields: bessiData
func (_m *Storage) SaveUserMatchingResult(bessiData model.UserMatchingResult) error {
	ret := _m.Called(bessiData)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.UserMatchingResult) error); ok {
		r0 = rf(bessiData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateConfig provides a mock function with given fields: config
func (_m *Storage) UpdateConfig(config model.Config) error {
	ret := _m.Called(config)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Config) error); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSurveyData provides a mock function with given fields: surveyData
func (_m *Storage) UpdateSurveyData(surveyData model.SurveyData) error {
	ret := _m.Called(surveyData)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.SurveyData) error); ok {
		r0 = rf(surveyData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t mockConstructorTestingTNewStorage) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
