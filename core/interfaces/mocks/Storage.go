// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	interfaces "application/core/interfaces"

	mock "github.com/stretchr/testify/mock"

	model "application/core/model"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// CreateUserData provides a mock function with given fields: bessiData
func (_m *Storage) CreateUserData(bessiData model.UserData) error {
	ret := _m.Called(bessiData)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.UserData) error); ok {
		r0 = rf(bessiData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteConfig provides a mock function with given fields: id
func (_m *Storage) DeleteConfig(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteExample provides a mock function with given fields: orgID, appID, id
func (_m *Storage) DeleteExample(orgID string, appID string, id string) error {
	ret := _m.Called(orgID, appID, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(orgID, appID, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserData provides a mock function with given fields: id
func (_m *Storage) DeleteUserData(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindConfig provides a mock function with given fields: configType, appID, orgID
func (_m *Storage) FindConfig(configType string, appID string, orgID string) (*model.Config, error) {
	ret := _m.Called(configType, appID, orgID)

	var r0 *model.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*model.Config, error)); ok {
		return rf(configType, appID, orgID)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *model.Config); ok {
		r0 = rf(configType, appID, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(configType, appID, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindConfigByID provides a mock function with given fields: id
func (_m *Storage) FindConfigByID(id string) (*model.Config, error) {
	ret := _m.Called(id)

	var r0 *model.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Config, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Config); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindConfigs provides a mock function with given fields: configType
func (_m *Storage) FindConfigs(configType *string) ([]model.Config, error) {
	ret := _m.Called(configType)

	var r0 []model.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) ([]model.Config, error)); ok {
		return rf(configType)
	}
	if rf, ok := ret.Get(0).(func(*string) []model.Config); ok {
		r0 = rf(configType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(configType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindExample provides a mock function with given fields: orgID, appID, id
func (_m *Storage) FindExample(orgID string, appID string, id string) (*model.Example, error) {
	ret := _m.Called(orgID, appID, id)

	var r0 *model.Example
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*model.Example, error)); ok {
		return rf(orgID, appID, id)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *model.Example); ok {
		r0 = rf(orgID, appID, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Example)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(orgID, appID, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserData provides a mock function with given fields: id
func (_m *Storage) GetUserData(id string) (*model.UserData, error) {
	ret := _m.Called(id)

	var r0 *model.UserData
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.UserData, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.UserData); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserData)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertConfig provides a mock function with given fields: config
func (_m *Storage) InsertConfig(config model.Config) error {
	ret := _m.Called(config)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Config) error); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertExample provides a mock function with given fields: example
func (_m *Storage) InsertExample(example model.Example) error {
	ret := _m.Called(example)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Example) error); ok {
		r0 = rf(example)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PerformTransaction provides a mock function with given fields: _a0
func (_m *Storage) PerformTransaction(_a0 func(interfaces.Storage) error) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(interfaces.Storage) error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterStorageListener provides a mock function with given fields: listener
func (_m *Storage) RegisterStorageListener(listener interfaces.StorageListener) {
	_m.Called(listener)
}

// UpdateConfig provides a mock function with given fields: config
func (_m *Storage) UpdateConfig(config model.Config) error {
	ret := _m.Called(config)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Config) error); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateExample provides a mock function with given fields: example
func (_m *Storage) UpdateExample(example model.Example) error {
	ret := _m.Called(example)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Example) error); ok {
		r0 = rf(example)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserData provides a mock function with given fields: bessiData
func (_m *Storage) UpdateUserData(bessiData model.UserData) error {
	ret := _m.Called(bessiData)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.UserData) error); ok {
		r0 = rf(bessiData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t mockConstructorTestingTNewStorage) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
