openapi: 3.0.3
info:
  title: Rokwire Skill to Jobs Building Block API
  description: Skill to Jobs Building Block API Documentation
  version: 1.0.0
servers:
  - url: 'https://api.rokwire.illinois.edu/skills-to-jobs'
    description: Production server
  - url: 'https://api-test.rokwire.illinois.edu/skills-to-jobs'
    description: Test server
  - url: 'https://api-dev.rokwire.illinois.edu/skills-to-jobs'
    description: Development server
  - url: 'http://localhost/skills-to-jobs'
    description: Local server
tags:
  - name: Client
    description: Client applications APIs.
  - name: Admin
    description: Clients administration applications APIs.
  - name: BBs
    description: Building Block APIs.
  - name: TPS
    description: Third-Party Service APIs.
  - name: System
    description: Third-Party Service APIs.
  - name: Default
    description: Default APIs.
paths:
  /version:
    get:
      tags:
        - Default
      summary: Get version
      description: |
        Gets current version of this service
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: v1.0.0
        '500':
          description: Internal error
  '/api/examples/{id}':
    get:
      tags:
        - Client
      summary: Gets example
      description: |
        Gets example record

        **Auth:** Requires valid user token with `get_examples` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of example to retrieve
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Example'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /api/bessi:
    post:
      tags:
        - Client
      summary: Posts the BESSI data
      description: |
        Posts BESSI data

        **Auth:** Requires valid user token
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BessiData'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BessiData'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  '/api/bessi/{id}':
    get:
      tags:
        - Client
      summary: Gets BESSI data
      description: |
        Gets BESSI data

        **Auth:** Requires valid user token
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of BESSI Data to retrieve
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BessiData'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    put:
      tags:
        - Client
      summary: Updates BESSI data
      description: |
        Updates BESSI data

        **Auth:** Requires valid user token with `put_bessi_datas` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of BESSI Data to update
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    delete:
      tags:
        - Client
      summary: Deletes BESSI data
      description: |
        Deletes BESSI data

        **Auth:** Requires valid user token with `delete_bessi_datas` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of BESSI Data to delete
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /api/admin/examples:
    post:
      tags:
        - Admin
      summary: Create example
      description: |
        Creates new example record

        **Auth:** Requires valid admin token with `update_examples` or `all_examples`  permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of example to update
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: New example content
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Example'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Example'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  '/api/admin/examples/{id}':
    get:
      tags:
        - Admin
      summary: Gets example
      description: |
        Gets example record

        **Auth:** Requires valid admin token with one of the following permissions:
        - `get_examples`
        - `update_examples`
        - `delete_examples`
        - `all_examples`
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of example to retrieve
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Example'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    put:
      tags:
        - Admin
      summary: Update example
      description: |
        Updates example record

        **Auth:** Requires valid admin token with `update_examples` or `all_examples`  permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of example to update
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: New example content
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Example'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    delete:
      tags:
        - Admin
      summary: Delete example
      description: |
        Deletes example record

        **Auth:** Requires valid admin token with `delete_examples` or `all_examples` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of example to delete
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  /api/admin/configs:
    get:
      tags:
        - Admin
      summary: Get configs
      description: |
        Get existing configs by search parameters

        **Auth:** Requires valid admin token with one of the following permissions:
        - `get_configs_skills-to-jobs`
        - `update_configs_skills-to-jobs`
        - `delete_configs_skills-to-jobs`
        - `all_configs_skills-to-jobs`
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: query
          description: config type
          required: false
          style: form
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Config'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    post:
      tags:
        - Admin
      summary: Create config
      description: |
        Creates a new config

        **Auth:** Requires valid admin token with one of the following permissions:
        - `update_configs_skills-to-jobs`
        - `all_configs_skills-to-jobs`
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
            examples:
              system:
                summary: System-wide config
                value:
                  type: config_type
                  all_apps: true
                  all_orgs: true
                  system: true
                  data:
                    example_env: example
              org_admin:
                summary: Organization-wide config
                value:
                  type: config_type
                  all_apps: true
                  all_orgs: false
                  system: false
                  data:
                    example_env: example
              app_org_specific:
                summary: Application organization specific config
                value:
                  type: config_type
                  all_apps: false
                  all_orgs: false
                  system: false
                  data:
                    example_env: example
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  '/api/admin/configs/{id}':
    get:
      tags:
        - Admin
      summary: Get config
      description: |
        Gets config record

        **Auth:** Requires valid admin token with one of the following permissions:
        - `get_configs_skills-to-jobs`
        - `update_configs_skills-to-jobs`
        - `delete_configs_skills-to-jobs`
        - `all_configs_skills-to-jobs`
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of config to retrieve
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    put:
      tags:
        - Admin
      summary: Update config
      description: |
        Updates existing config record

        **Auth:** Requires valid admin token with one of the following permissions:
        - `update_configs_skills-to-jobs`
        - `all_configs_skills-to-jobs`
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of config to update
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: New config content
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
            examples:
              system:
                summary: System-wide config
                value:
                  type: config_type
                  all_apps: true
                  all_orgs: true
                  system: true
                  data:
                    example_env: example
              org_admin:
                summary: Organization-wide config
                value:
                  type: config_type
                  all_apps: true
                  all_orgs: false
                  system: false
                  data:
                    example_env: example
              app_org_specific:
                summary: Application organization specific config
                value:
                  type: config_type
                  all_apps: false
                  all_orgs: false
                  system: false
                  data:
                    example_env: example
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
    delete:
      tags:
        - Admin
      summary: Delete config
      description: |
        Deletes config record

        **Auth:** Requires valid admin token with one of the following permissions:
        - `delete_configs_skills-to-jobs`
        - `all_configs_skills-to-jobs`
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of config to delete
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  '/api/bbs/examples/{id}':
    get:
      tags:
        - BBs
      summary: Gets example
      description: |
        Gets example record

        **Auth:** Requires valid first-party service account token with `get_examples` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of example to retrieve
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Example'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  '/api/tps/examples/{id}':
    get:
      tags:
        - TPS
      summary: Gets example
      description: |
        Gets example record

        **Auth:** Requires valid third-party service account token with `get_examples` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of example to retrieve
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Example'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
  '/api/system/examples/{id}':
    get:
      tags:
        - System
      summary: Gets example
      description: |
        Gets example record

        **Auth:** Requires valid admin token with `get_examples` permission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of example to retrieve
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Example'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal error
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Config:
      required:
        - id
        - type
        - app_id
        - org_id
        - system
        - data
        - date_created
        - date_updated
      type: object
      properties:
        id:
          readOnly: true
          type: string
        type:
          type: string
        app_id:
          readOnly: true
          type: string
        org_id:
          readOnly: true
          type: string
        system:
          type: boolean
        data:
          anyOf:
            - $ref: '#/components/schemas/EnvConfigData'
        date_created:
          readOnly: true
          type: string
        date_updated:
          readOnly: true
          type: string
          nullable: true
    EnvConfigData:
      type: object
      required:
        - example_env
      properties:
        example_env:
          type: string
    Example:
      type: object
      required:
        - id
        - app_id
        - org_id
        - data
        - date_created
      properties:
        id:
          type: string
          readOnly: true
        org_id:
          type: string
          readOnly: true
        app_id:
          type: string
          readOnly: true
        data:
          type: string
        date_created:
          type: string
          readOnly: true
        date_updated:
          type: string
          nullable: true
          readOnly: true
    BessiData:
      type: object
      required:
        - id
        - scores
        - date_created
        - date_updated
      properties:
        id:
          type: string
          readOnly: true
        scores:
          type: array
          items:
            $ref: '#/components/schemas/WorkstyleScore'
        date_created:
          type: string
          readOnly: true
        date_updated:
          type: string
          nullable: true
          readOnly: true
    WorkstyleScore:
      type: object
      required:
        - workstyle
        - score
      properties:
        workstyle:
          type: string
          readOnly: true
        score:
          type: int
          readOnly: true
    _admin_req_update-configs:
      required:
        - type
        - all_apps
        - all_orgs
        - system
        - data
      type: object
      properties:
        type:
          type: string
        all_apps:
          writeOnly: true
          type: boolean
        all_orgs:
          writeOnly: true
          type: boolean
        system:
          type: boolean
        data:
          anyOf:
            - $ref: '#/components/schemas/EnvConfigData'
